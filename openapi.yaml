openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:9999
  description: Generated server url
paths:
  /auth:
    post:
      tags:
      - auth-controller
      operationId: authentication
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /auth/tfa:
    post:
      tags:
      - auth-controller
      operationId: tfaAuthentication
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /auth/telegram:
    post:
      tags:
      - auth-controller
      operationId: telegramAuthentication
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
  /devices:
    get:
      tags:
      - device-controller
      operationId: getDevices
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: entity
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
  /devices/{deviceId}:
    get:
      tags:
      - device-controller
      operationId: getDevice
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: deviceId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Device'
  /devices/{deviceId}/sensors:
    get:
      tags:
      - device-controller
      operationId: getSensorsByDevice
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: deviceId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'
  /devices/{deviceId}/sensor/{realSensorId}:
    get:
      tags:
      - device-controller
      operationId: getSensorByDevice
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: deviceId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: realSensorId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Sensor'
  /entities:
    get:
      tags:
      - entity-controller
      operationId: getEntities
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: sensor
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: user
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
  /gateways/{gatewayId}:
    get:
      tags:
      - gateway-controller
      operationId: getGateway
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: gatewayId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Gateway'
  /gateways/{gatewayId}/devices:
    get:
      tags:
      - gateway-controller
      operationId: getGatewaysDevices
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: gatewayId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
  /gateways/{gatewayId}/devices/{realDeviceId}:
    get:
      tags:
      - gateway-controller
      operationId: getGatewaysDevice
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: gatewayId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: realDeviceId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Device'
  /gateways/{gatewayId}/devices/{realDeviceId}/sensors:
    get:
      tags:
      - gateway-controller
      operationId: getGatewaysDevicesSensors
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: gatewayId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: realDeviceId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'
  /gateways/{gatewayId}/devices/{realDeviceId}/sensors/{realSensorId}:
    get:
      tags:
      - gateway-controller
      operationId: getGatewaysDevicesSensor
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: gatewayId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: realDeviceId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: realSensorId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Sensor'
  /gateways:
    get:
      tags:
      - gateway-controller
      operationId: getGateways
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gateway'
  /sensors:
    get:
      tags:
      - sensor-controller
      operationId: getSensors
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: entity
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'
  /users/{userid}:
    get:
      tags:
      - user-controller
      operationId: user
      parameters:
      - name: userid
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - user-controller
      operationId: editUser
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: userid
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
    delete:
      tags:
      - user-controller
      operationId: deleteEntityUser
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: userid
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: object
  /users:
    get:
      tags:
      - user-controller
      operationId: getUsers
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: entity
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: disabledAlert
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: view
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
      - user-controller
      operationId: createUser
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /users/{userid}/devices:
    get:
      tags:
      - user-controller
      operationId: getUserDevices
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: userid
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: object
  /views:
    get:
      tags:
      - view-controller
      operationId: views
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/View'
    post:
      tags:
      - view-controller
      operationId: createView
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/View'
  /views/{viewId}:
    get:
      tags:
      - view-controller
      operationId: selectOneView
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: viewId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/View'
    delete:
      tags:
      - view-controller
      operationId: deleteView
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: viewId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: default response
          content:
            '*/*':
              schema:
                type: object
components:
  schemas:
    Device:
      type: object
      properties:
        name:
          type: string
        frequency:
          type: integer
          format: int32
        realDeviceId:
          type: integer
          format: int32
        deviceId:
          type: integer
          format: int32
    Alert:
      type: object
      properties:
        threshold:
          type: number
          format: double
        type:
          type: integer
          format: int32
        deleted:
          type: boolean
        entity:
          $ref: '#/components/schemas/Entity'
        sensor:
          $ref: '#/components/schemas/Sensor'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        alertId:
          type: integer
          format: int32
    Entity:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
        deleted:
          type: boolean
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/Alert'
        sensors:
          type: array
          items:
            $ref: '#/components/schemas/Sensor'
        entityId:
          type: integer
          format: int32
    Sensor:
      type: object
      properties:
        type:
          type: string
        realSensorId:
          type: integer
          format: int32
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/Alert'
        device:
          $ref: '#/components/schemas/Device'
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        viewGraphs1:
          type: array
          items:
            $ref: '#/components/schemas/ViewGraph'
        viewGraphs2:
          type: array
          items:
            $ref: '#/components/schemas/ViewGraph'
        sensorId:
          type: integer
          format: int32
    User:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        password:
          type: string
        type:
          type: string
          enum:
          - USER
          - MOD
          - ADMIN
        telegramName:
          type: string
        telegramChat:
          type: string
        tfa:
          type: boolean
        deleted:
          type: boolean
        entity:
          $ref: '#/components/schemas/Entity'
        views:
          type: array
          items:
            $ref: '#/components/schemas/View'
        disabledAlerts:
          type: array
          items:
            $ref: '#/components/schemas/Alert'
        userId:
          type: integer
          format: int32
    View:
      type: object
      properties:
        viewId:
          type: integer
          format: int32
        name:
          type: string
        user:
          $ref: '#/components/schemas/User'
        viewGraphs:
          type: array
          items:
            $ref: '#/components/schemas/ViewGraph'
    ViewGraph:
      type: object
      properties:
        correlation:
          type: integer
          format: int32
        view:
          $ref: '#/components/schemas/View'
        sensor1:
          $ref: '#/components/schemas/Sensor'
        sensor2:
          $ref: '#/components/schemas/Sensor'
        viewGraphId:
          type: integer
          format: int32
    Gateway:
      type: object
      properties:
        name:
          type: string
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
        gatewayId:
          type: integer
          format: int32
